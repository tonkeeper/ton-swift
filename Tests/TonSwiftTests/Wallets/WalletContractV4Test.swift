import XCTest
import TweetNacl
import BigInt
@testable import TonSwift

final class WalletContractV4Test: XCTestCase {
    
    private let publicKey = Data(hex: "5754865e86d0ade1199301bbb0319a25ed6b129c4b0a57f28f62449b3df9c522")!
    private let secretKey = Data(hex: "34aebb9ea454967f16c407c0f8877763e86212116468169d93a3dcbcafe530c95754865e86d0ade1199301bbb0319a25ed6b129c4b0a57f28f62449b3df9c522")!
    
    func testWalletContractV4() throws {
        try testR1()
        try testR2()
    }
    
    func testR1() throws {
        let contractR1 = WalletV4R1(workchain: 0, publicKey: publicKey)
        
        XCTAssertEqual(try contractR1.address(), try Address.parse("EQAimhPwOYc5Z1JP_pddxo82SHOl67T0Lklw91pKtSX2Q094"))
        XCTAssertEqual(try contractR1.stateInit.data?.toString(), "x{0000000029A9A3175754865E86D0ADE1199301BBB0319A25ED6B129C4B0A57F28F62449B3DF9C5224_}")
        XCTAssertEqual(try contractR1.stateInit.code?.toString(), "x{FF00F4A413F4BCF2C80B}\n x{2_}\n  x{4}\n   x{D001D0D3030171B0915BE021D749C120915BE001D31F218210706C7567BD228210626C6E63BDB022821064737472BDB0925F03E002FA403020FA4401C8CA07CBFFC9D0ED44D0810140D721F404305C810108F40A6FA131B3925F05E004D33FC8258210706C7567BA9131E30D248210626C6E63BAE30004}\n    x{01FA00F404308210706C7567831EB17080185005CB0527CF165003FA02F40012CB69CB1F5210CB3F}\n    x{F8276F228210626C6E63831EB17080185005CB0527CF1624FA0214CB6A13CB1F5230CB3F01FA02F400}\n    x{821064737472BA8E3504810108F45930ED44D0810140D720C801CF16F400C9ED54821064737472831EB17080185004CB0558CF1622FA0212CB6ACB1FCB3F9410345F04E2C98040FB00}\n   x{2_}\n    x{2_}\n     x{5}\n      x{B29DFB513420405035C87D010C00B23281F2FFF274006040423D029BE84C6_}\n      x{2_}\n       x{ADCE76A26840206B90EB85FFC_}\n       x{AF1DF6A26840106B90EB858FC_}\n     x{B8C97ED44D0D70B1F}\n    x{BD242B6F6A2684080A06B90FA0218470D4080847A4937D29910CE6903E9FF9837812801B7810148987159F3184_}\n  x{F28308D71820D31FD31FD31F02F823BBF263ED44D0D31FD31FD3FFF404D15143BAF2A15151BAF2A205F901541064F910F2A3F80024A4C8CB1F5240CB1F5230CBFF5210F400C9ED54F80F01D30721C0009F6C519320D74A96D307D402FB00E830E021C001E30021C002E30001C0039130E30D03A4C8CB1F12CB1FCBFF}\n   x{D207FA00D4D422F90005C8CA0715CBFFC9D077748018C8CB05CB0222CF165005FA0214CB6B12CCCCC971FB00C84014810108F451F2A702}\n   x{810108D718C8542025810108F451F2A782106E6F746570748018C8CB05CB025004CF16821005F5E100FA0213CB6A12CB1FC971FB0002}\n   x{810108D718305202810108F459F2A7F82582106473747270748018C8CB05CB025005CF16821005F5E100FA0214CB6A13CB1F12CB3FC973FB00}\n   x{F400C9ED54}")
        
        let transfer = try contractR1.createTransfer(args: try args())
        XCTAssertEqual(try transfer.toString(), """
                       x{000355EAEDB79E63A350B6700310D9E31F6CBD9285B5C990BBF510385FC7D2CCCF6412C8005DD767B8178078500C4498F011565D4C56901B90A5A9F7B9DAB10F70BEB8C99E3BEBAA01AA7898F9927EB0E7140588C89EBBCC377523FE2DB8649729A9A31764257F4F0000003E000101}
                        x{62007D507CF9B4D00622B6DC23E0BA7F3CA9584A13C5A3830F3DA8E9B76F27EFF641202FAF0800000000000000000000000000000000000048656C6C6F20776F726C643A2031}
                        x{62007D507CF9B4D00622B6DC23E0BA7F3CA9584A13C5A3830F3DA8E9B76F27EFF641202FAF0800000000000000000000000000000000000048656C6C6F20776F726C643A2032}
                       """)
    }
    
    func testR2() throws {
        let contractR2 = WalletV4R2(workchain: 0, publicKey: publicKey)
        
        XCTAssertEqual(try contractR2.address(), try Address.parse("EQDnBF4JTFKHTYjulEJyNd4dstLGH1m51UrLdu01_tw4z2Au"))
        XCTAssertEqual(try contractR2.stateInit.data?.toString(), "x{0000000029A9A3175754865E86D0ADE1199301BBB0319A25ED6B129C4B0A57F28F62449B3DF9C5224_}")
        XCTAssertEqual(try contractR2.stateInit.code?.toString(), "x{FF00F4A413F4BCF2C80B}\n x{2_}\n  x{4}\n   x{D001D0D3032171B0925F04E022D749C120925F04E002D31F218210706C7567BD22821064737472BDB0925F05E003FA403020FA4401C8CA07CBFFC9D0ED44D0810140D721F404305C810108F40A6FA131B3925F07E005D33FC8258210706C7567BA923830E30D03821064737472BA925F06E30D}\n    x{01FA00F40430F8276F2230500AA121BEF2E0508210706C7567831EB17080185004CB0526CF1658FA0219F400CB6917CB1F5260CB3F20C98040FB0006}\n    x{5004810108F45930ED44D0810140D720C801CF16F400C9ED540172B08E23821064737472831EB17080185005CB055003CF1623FA0213CB6ACB1FCB3FC98040FB00925F03E2}\n   x{2_}\n    x{2_}\n     x{5}\n      x{B29DFB513420405035C87D010C00B23281F2FFF274006040423D029BE84C6_}\n      x{2_}\n       x{ADCE76A26840206B90EB85FFC_}\n       x{AF1DF6A26840106B90EB858FC_}\n     x{B8C97ED44D0D70B1F}\n    x{BD242B6F6A2684080A06B90FA0218470D4080847A4937D29910CE6903E9FF9837812801B7810148987159F3184_}\n  x{F28308D71820D31FD31FD31F02F823BBF264ED44D0D31FD31FD3FFF404D15143BAF2A15151BAF2A205F901541064F910F2A3F80024A4C8CB1F5240CB1F5230CBFF5210F400C9ED54F80F01D30721C0009F6C519320D74A96D307D402FB00E830E021C001E30021C002E30001C0039130E30D03A4C8CB1F12CB1FCBFF}\n   x{D207FA00D4D422F90005C8CA0715CBFFC9D077748018C8CB05CB0222CF165005FA0214CB6B12CCCCC973FB00C84014810108F451F2A702}\n   x{810108D718FA00D33FC8542047810108F451F2A782106E6F746570748018C8CB05CB025006CF165004FA0214CB6A12CB1FCB3FC973FB0002}\n   x{810108D718FA00D33F305224810108F459F2A782106473747270748018C8CB05CB025005CF165003FA0213CB6ACB1F12CB3FC973FB00}\n   x{F400C9ED54}")
        
        let transfer = try contractR2.createTransfer(args: try args())
        XCTAssertEqual(try transfer.toString(), """
                       x{000355EAEDB79E63A350B6700310D9E31F6CBD9285B5C990BBF510385FC7D2CCCF6412C8005DD767B8178078500C4498F011565D4C56901B90A5A9F7B9DAB10F70BEB8C99E3BEBAA01AA7898F9927EB0E7140588C89EBBCC377523FE2DB8649729A9A31764257F4F0000003E000101}
                        x{62007D507CF9B4D00622B6DC23E0BA7F3CA9584A13C5A3830F3DA8E9B76F27EFF641202FAF0800000000000000000000000000000000000048656C6C6F20776F726C643A2031}
                        x{62007D507CF9B4D00622B6DC23E0BA7F3CA9584A13C5A3830F3DA8E9B76F27EFF641202FAF0800000000000000000000000000000000000048656C6C6F20776F726C643A2032}
                       """)
    }
    
    private func args() throws -> WalletTransferData {
        try WalletTransferData(
            seqno: 62,
            secretKey: secretKey,
            messages: [
                .internal(
                    to: Address.parse("kQD6oPnzaaAMRW24R8F0_nlSsJQni0cGHntR027eT9_sgtwt"),
                    value: BigUInt(0.1 * 1000000000),
                    textPayload: "Hello world: 1"
                ),
                .internal(
                    to: Address.parse("kQD6oPnzaaAMRW24R8F0_nlSsJQni0cGHntR027eT9_sgtwt"),
                    value: BigUInt(0.1 * 1000000000),
                    textPayload: "Hello world: 2"
                )
            ],
            sendMode: SendMode(payMsgFees: true),
            timeout: 1680179023
        )
    }
}
